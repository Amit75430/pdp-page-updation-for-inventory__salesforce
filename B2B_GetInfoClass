//public with sharing class B2B_GetInfoClass {
//    public B2B_GetInfoClass() {

//    }
//}
public with sharing class B2B_GetInfoClass {
    @AuraEnabled(cacheable=true)
    public static ConnectApi.ProductDetail getProduct(
      String communityId,
      String productId,
      String effectiveAccountId
    ) {
      // Lookup the webstore ID associated with the community
      String webstoreId = B2BUtils.resolveCommunityIdToWebstoreId(communityId);
  
      // https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_CommerceCatalog_static_methods.htm#apex_ConnectAPI_CommerceCatalog_static_methods
      return ConnectApi.CommerceCatalog.getProduct(
        webstoreId,
        productId,
        effectiveAccountID,
        null,
        false,
        null,
        false,
        true,
        false
      );
    }
  
    @AuraEnabled(cacheable=true)
    public static boolean checkProductIsInStock(String productId ) {
      /*
       * The following is an example of calling an external API.
       * The example API provided is extremely simple: It takes in a product id
       * and returns a true or false value for inStock based on whether the 15th char is odd or even.
       *
       * To access this endpoint on your org, go to Remote Site Settings in Setup as an admin user
       * click "New Remote Site" and provide "https://inventorymanagerdemo.herokuapp.com" for the "Remote Site URL" field
       */

       
       
    /*  Map<String, object> getRes=getInventory(productId);
      Decimal myreserveditem=(Decimal)getRes.get('Reserved_stock__c');
      if(myreserveditem!=null)
      {
        reserved = myreserveditem+reserved;

      }*/
      Decimal avaProduct;
      
    
      Http http = new Http();
      HttpRequest request = new HttpRequest();
      //String endpoint =
       // 'https://inventorymanagerdemo.herokuapp.com/api/inventory/' + productId;
      request.setEndpoint('https://training2021org1--abhishek.sandbox.my.salesforce.com/services/apexrest/Inventory__c/'+productId);
      request.setMethod('GET');
      request.setHeader('Content-Type', 'application/json');
      request.setHeader('Authorization', 'Bearer '+UserInfo.getSessionID());
      try{
      HttpResponse response = http.send(request);
      // If the request is successful, parse the JSON response.
      System.debug(response);
      if (response.getStatusCode() == 200) {
        // Deserialize the JSON string into collections of primitive data types.
        system.debug(JSON.deserializeUntyped(response.getBody()));
        Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(
          response.getBody()
        );
        avaProduct= (Decimal)results.get('Current_Stock__c');
      }
    }
        
    

    catch(Exception e)
    {
        System.debug(e.getMessage());
    }
    if(avaProduct>0)
        {
            return true;
        }
        else{
            return false;
        }
    }
 /*   if(avaProduct!=0.00)
    {
        return true;
    }
    else
    {
        return false;

    }
    */
    

    @AuraEnabled(cacheable=true)
    public static Map<String,Object> getInventory(String productId) {
        try{
        
        Http http = new Http();
      HttpRequest request = new HttpRequest();
      //String endpoint =
       // 'https://inventorymanagerdemo.herokuapp.com/api/inventory/' + productId;
       String endpoint = (Url.getOrgDomainUrl().toExternalForm() +'/services/apexrest/Inventory__c/'+productId);
      request.setEndpoint(endpoint);
      request.setMethod('GET');
      request.setHeader('Content-Type', 'application/json');
      request.setHeader('Authorization', 'Bearer '+UserInfo.getSessionID());
      
      
        HttpResponse response = http.send(request);
        // If the request is successful, parse the JSON response.
        System.debug(response);
        Map<String, Object> results = new Map<String, Object>();
        if (response.getStatusCode() == 200) {
          // Deserialize the JSON string into collections of primitive data types.
          //system.debug(JSON.deserializeUntyped(response.getBody()));
           results = (Map<String, Object>) JSON.deserializeUntyped(
            response.getBody()
          );
          return results;
        }
        return results;
      }
      catch(Exception e)
      {
          throw new AuraHandledException(e.getMessage());
      }
     
    
    }





    
    @AuraEnabled(cacheable=true)
    public static void updateReserved(Decimal reserved,String productId) 
    {
        

        Map<String, object> getRes=getInventory(productId);
        Decimal myreserveditem=(Decimal)getRes.get('Reserved_stock__c');
        if(myreserveditem!=null)
        {
          reserved = myreserveditem+reserved;
  
        }
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://training2021org1--abhishek.sandbox.my.salesforce.com/services/apexrest/Inventory__c/'+productId);
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        request.setMethod('PATCH');
        request.setHeader('Content-Type', 'application/json;charset=UTF-8');
        request.setBody('{"Reserved_stock__c":'+reserved+'}');
        
        HttpResponse response = http.send(request);
        
      //  Map<String, Object> getRes = (Map<String, Object>) JSON.deserializeUntyped(
      //    response.getBody()
     //   );
       
       /* Decimal myreserveditem=(Decimal)getRes.get('Reserved_stock__c');
        if(myreserveditem!=null)
        {
            reserved = myreserveditem+reserved;

        }
        
        system.debug(response);
        return productId;
         */
      
    
    
      
        // If the request is successful, parse the JSON response.
       // system.debug(response);
        
    }



    @AuraEnabled(cacheable=true)
    public static void myCartItem(String cartItemId) 
    {
        Decimal reserved=0.0;
        
        cartItem myCart= [Select Id,Quantity,Product2Id from cartItem where Id =:cartItemId limit 1];
        reserved=mycart.quantity;
        Map<String, object> getRes=getInventory(myCart.Product2Id);
        Decimal myreserveditem=(Decimal)getRes.get('Reserved_stock__c');
        if(myreserveditem!=null)
        {
          reserved = myreserveditem-reserved;
  
        }
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://training2021org1--abhishek.sandbox.my.salesforce.com/services/apexrest/Inventory__c/'+myCart.Product2Id);
        request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        request.setMethod('PATCH');
        request.setHeader('Content-Type', 'application/json;charset=UTF-8');
        request.setBody('{"Reserved_stock__c":'+reserved+'}');
        
        HttpResponse response = http.send(request);
    }

 




    @AuraEnabled
      public static void updateCommit(String ordersummaryId){
        List<OrderItemSummary> OrderItemList= [Select Id, OrderSummaryId, Quantity,StockKeepingUnit, Product2Id from OrderItemSummary where OrderSummaryId =:ordersummaryId];
        for(OrderItemSummary order: OrderItemList)
        {
            String sku= order.StockKeepingUnit;
            if(sku!=null)
            {
            
                Decimal committedQty;
            String productId=order.Product2Id;
            
            Map<String,Object> results=B2B_GetInfoClass.getInventory(productId);
          //  Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(
          //  response.getBody());
        
            Decimal oldCommittedQty = (Decimal)results.get('Commited_stock__c');
            if(oldCommittedQty!=null)
            {
                committedQty = oldCommittedQty + order.Quantity;
            }
            else{
                committedQty = order.Quantity;
            }
            Decimal oldResQty = (Decimal)results.get('Reserved_stock__c');
            Decimal ResQty = oldResQty - order.Quantity;
            //String sfdcBaseURL= URL.getSalesforceBaseUrl().toExternalForm();
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(Url.getOrgDomainUrl().toExternalForm() +'/services/apexrest/Inventory__c/'+productId);
            
            request.setBody('{"Reserved_stock__c":'+ResQty+',"Commited_stock__c":'+committedQty+'}');
            request.setMethod('PATCH');
            request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
            request.setHeader('Content-Type', 'application/json');
            //request.setBody('{"Commited_stock__c":'+committedQty+',"Reserved_stock__c":'+ResQty+'}');
            
            HttpResponse response=http.send(request);
            system.debug(response);
        }
        
      }
    }


  
    @AuraEnabled
    public static ConnectApi.CartSummary getCartSummary(
      String communityId,
      String effectiveAccountId
    ) {
      // Lookup the webstore ID associated with the community
      String webstoreId = B2BUtils.resolveCommunityIdToWebstoreId(communityId);
  
      //'current' is available in version 50.0 and later and indicates a cart with a status that isnâ€™t Closed or PendingDelete
      //This is important for the product detail page since we are using the cart summary to check if the status is "Processing" or "Checkout"
      String activeCartOrId = 'current';
  
      // https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_CommerceCart_static_methods.htm
      return ConnectApi.CommerceCart.getCartSummary(
        webstoreId,
        effectiveAccountId,
        activeCartOrId
      );
    }
  
    @AuraEnabled
    public static ConnectApi.CartItem addToCart(
      String communityId,
      String productId,
      String quantity,
      String effectiveAccountId
    ) {
      // Lookup the webstore ID associated with the community
      String webstoreId = B2BUtils.resolveCommunityIdToWebstoreId(communityId);
  
      ConnectApi.CartItemInput cartInput = new ConnectApi.CartItemInput();
      cartInput.productId = productId;
      cartInput.quantity = quantity;
      cartInput.type = ConnectApi.CartItemType.PRODUCT;
  
      // https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_CommerceCart_static_methods.htm#apex_ConnectAPI_CommerceCart_static_methods
      return ConnectApi.CommerceCart.addItemToCart(
        webstoreId,
        effectiveAccountId,
        'active',
        cartInput
      );
    }
  
    @AuraEnabled
    public static ConnectApi.Wishlist createAndAddToList(
      String communityId,
      String productId,
      String wishlistName,
      String effectiveAccountId
    ) {
      // Lookup the webstore ID associated with the community
      String webstoreId = B2BUtils.resolveCommunityIdToWebstoreId(communityId);
  
      // Store the product in a WishlistItemInput to pass to the Wishlist
      ConnectApi.WishlistItemInput wishlistItemInput = new ConnectApi.WishlistItemInput();
      wishlistItemInput.productId = productId;
  
      //Create a wishlistInput to be created
      ConnectApi.WishlistInput wishlistInput = new ConnectApi.WishlistInput();
      wishlistInput.name = wishlistName;
      wishlistInput.products = new List<ConnectApi.WishlistItemInput>{
        wishlistItemInput
      };
  
      // https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_CommerceWishlist_static_methods.htm#apex_ConnectAPI_CommerceWishlist_static_methods
      return ConnectApi.CommerceWishlist.createWishlist(
        webstoreId,
        effectiveAccountId,
        wishlistInput
      );
    }
  
    @AuraEnabled(cacheable=true)
    public static ConnectApi.ProductPrice getProductPrice(
      String communityId,
      String productId,
      String effectiveAccountId
    ) {
      // Lookup the webstore ID associated with the community
      String webstoreId = B2BUtils.resolveCommunityIdToWebstoreId(communityId);
  
      // https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_ConnectAPI_CommerceStorePricing_static_methods.htm#apex_ConnectAPI_CommerceStorePricing_static_methods
      return ConnectApi.CommerceStorePricing.getProductPrice(
        webstoreId,
        productId,
        effectiveAccountId
      );
    }
  }
  
